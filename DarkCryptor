#!/home/darkpydeu/Python/venv/bin/python3
# -*- coding: utf-8 -*-
"""
Powered by -> {-*> DarkPyDeu <*-}
"""

"""
Файлы должны сохранятся в той же директории где и исходник
"""

from PyQt5 import QtCore, QtGui, QtWidgets
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import pyAesCrypt as Cry
from random import shuffle
import os

file = None
fileDir = None
name = None
dir = None
privateKey = None
publicKey = None
choiceSettings = None

class Ui_Main(object):
    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(647, 130)
        Main.setMinimumSize(QtCore.QSize(647, 130))
        Main.setMaximumSize(QtCore.QSize(647, 130))
        Main.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);")
        self.lineEdit = QtWidgets.QLineEdit(Main)
        self.lineEdit.setGeometry(QtCore.QRect(8, 9, 540, 35))
        self.lineEdit.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Main)
        self.pushButton.setGeometry(QtCore.QRect(550, 9, 88, 35))
        self.pushButton.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Main)
        self.pushButton_2.setGeometry(QtCore.QRect(507, 91, 132, 35))
        self.pushButton_2.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.groupBox = QtWidgets.QGroupBox(Main)
        self.groupBox.setGeometry(QtCore.QRect(8, 50, 631, 41))
        self.groupBox.setStyleSheet("\n"
"background-color: rgb(0, 0, 0);")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(520, 1, 110, 34))
        self.pushButton_3.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(417, 1, 101, 34))
        self.lineEdit_3.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_6.setGeometry(QtCore.QRect(0, 0, 110, 34))
        self.pushButton_6.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_7.setGeometry(QtCore.QRect(111, 0, 110, 34))
        self.pushButton_7.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_4 = QtWidgets.QPushButton(Main)
        self.pushButton_4.setGeometry(QtCore.QRect(417, 91, 88, 35))
        self.pushButton_4.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(Main)
        self.pushButton_5.setGeometry(QtCore.QRect(327, 91, 88, 35))
        self.pushButton_5.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.retranslateUi(Main)
        QtCore.QMetaObject.connectSlotsByName(Main)

    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "DarkCryptorRSA"))
        self.lineEdit.setPlaceholderText(_translate("Main", "Имя файла"))
        self.pushButton.setText(_translate("Main", "Выбрать"))
        self.pushButton_2.setText(_translate("Main", "Шифровать"))
        self.pushButton_3.setText(_translate("Main", "Сгенерировать"))
        self.lineEdit_3.setPlaceholderText(_translate("Main", "Кол-во битов"))
        self.pushButton_6.setText(_translate("Main", "Публичный"))
        self.pushButton_7.setText(_translate("Main", "Приватный"))
        self.pushButton_4.setText(_translate("Main", "Настройки"))
        self.pushButton_5.setText(_translate("Main", "Имя"))

class Ui_Name(object):
    def setupUi(self, Name):
        Name.setObjectName("Name")
        Name.resize(200, 90)
        Name.setMinimumSize(QtCore.QSize(200, 90))
        Name.setMaximumSize(QtCore.QSize(200, 90))
        Name.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lineEdit = QtWidgets.QLineEdit(Name)
        self.lineEdit.setGeometry(QtCore.QRect(0, 10, 201, 32))
        self.lineEdit.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Name)
        self.pushButton.setGeometry(QtCore.QRect(55, 50, 88, 34))
        self.pushButton.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.pushButton.setObjectName("pushButton")
        self.retranslateUi(Name)
        QtCore.QMetaObject.connectSlotsByName(Name)

    def retranslateUi(self, Name):
        _translate = QtCore.QCoreApplication.translate
        Name.setWindowTitle(_translate("Name", "Редактор имени"))
        self.lineEdit.setPlaceholderText(_translate("Name", "Введите имя с расширением"))
        self.pushButton.setText(_translate("Name", "Сохранить"))

class Ui_StartMenu(object):
    def setupUi(self, StartMenu):
        StartMenu.setObjectName("StartMenu")
        StartMenu.resize(200, 90)
        StartMenu.setStyleSheet("background-color: rgb(0, 0, 0)")
        self.RSA = QtWidgets.QPushButton(StartMenu)
        self.RSA.setGeometry(QtCore.QRect(5, 10, 191, 34))
        self.RSA.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.RSA.setObjectName("RSA")
        self.AES = QtWidgets.QPushButton(StartMenu)
        self.AES.setGeometry(QtCore.QRect(5, 50, 191, 34))
        self.AES.setStyleSheet("color: rgb(255, 85, 0);\n"
"background-color: rgb(39, 39, 39);")
        self.AES.setObjectName("AES")
        self.retranslateUi(StartMenu)
        QtCore.QMetaObject.connectSlotsByName(StartMenu)

    def retranslateUi(self, StartMenu):
        _translate = QtCore.QCoreApplication.translate
        StartMenu.setWindowTitle(_translate("StartMenu", "DarkCryptor Start"))
        self.RSA.setText(_translate("StartMenu", "RSA"))
        self.AES.setText(_translate("StartMenu", "AES"))

class Ui_Settings(object):
    def setupUi(self, Settings):
        Settings.setObjectName("Settings")
        Settings.resize(191, 190)
        Settings.setMinimumSize(QtCore.QSize(191, 190))
        Settings.setMaximumSize(QtCore.QSize(191, 190))
        Settings.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.groupBox = QtWidgets.QGroupBox(Settings)
        self.groupBox.setGeometry(QtCore.QRect(0, 10, 190, 55))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setGeometry(QtCore.QRect(10, 5, 105, 22))
        self.radioButton.setStyleSheet("color: rgb(255, 85, 0);")
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 27, 121, 22))
        self.radioButton_2.setStyleSheet("color: rgb(255, 85, 0);")
        self.radioButton_2.setObjectName("radioButton_2")
        self.checkBox = QtWidgets.QCheckBox(Settings)
        self.checkBox.setGeometry(QtCore.QRect(10, 65, 181, 22))
        self.checkBox.setStyleSheet("color: rgb(255, 85, 0);")
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(Settings)
        self.checkBox_2.setGeometry(QtCore.QRect(10, 85, 151, 22))
        self.checkBox_2.setStyleSheet("color: rgb(255, 85, 0);")
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(Settings)
        self.checkBox_3.setGeometry(QtCore.QRect(10, 105, 181, 22))
        self.checkBox_3.setStyleSheet("color: rgb(255, 85, 0);")
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(Settings)
        self.checkBox_4.setGeometry(QtCore.QRect(10, 125, 131, 22))
        self.checkBox_4.setStyleSheet("color: rgb(255, 85, 0);")
        self.checkBox_4.setObjectName("checkBox_4")
        self.pushButton = QtWidgets.QPushButton(Settings)
        self.pushButton.setGeometry(QtCore.QRect(9, 152, 171, 31))
        self.pushButton.setStyleSheet("color: rgb(255, 85, 0); background-color:rgb(29, 29, 29)")
        self.pushButton.setObjectName("pushButton")
        self.retranslateUi(Settings)
        QtCore.QMetaObject.connectSlotsByName(Settings)

    def retranslateUi(self, Settings):
        _translate = QtCore.QCoreApplication.translate
        Settings.setWindowTitle(_translate("Settings", "Настройки"))
        self.radioButton.setText(_translate("Settings", "Шифровать"))
        self.radioButton.setChecked(True)
        self.radioButton_2.setText(_translate("Settings", "Расшифровать"))
        self.checkBox.setText(_translate("Settings", "Директории"))
        self.checkBox_2.setText(_translate("Settings", "Сохранить пароль"))
        self.checkBox_3.setText(_translate("Settings", "Пользовательское имя"))
        self.checkBox_4.setText(_translate("Settings", "Исходный файл"))
        self.pushButton.setText(_translate("Settings", "Сохранить"))

"""CyberCryptor"""
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(647, 190)
        Dialog.setMinimumSize(QtCore.QSize(647, 190))
        Dialog.setMaximumSize(QtCore.QSize(647, 190))
        Dialog.setWindowIcon(QtGui.QIcon("/home/darkpydeu/Изображения/Lock.ico"))
        Dialog.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(8, 9, 540, 35))
        self.lineEdit.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(550, 9, 88, 35))
        self.pushButton.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(507, 150, 132, 35))
        self.pushButton_2.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(8, 50, 631, 91))
        self.groupBox.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(515, 50, 110, 34))
        self.pushButton_3.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(0, 10, 631, 35))
        self.lineEdit_2.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(412, 50, 101, 34))
        self.lineEdit_3.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setToolTip("Длина пароля в символах\nБайт = 1 символ")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(417, 150, 88, 35))
        self.pushButton_4.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(327, 150, 88, 35))
        self.pushButton_5.setStyleSheet("color: rgb(255, 85, 0); background-color: rgb(39, 39, 39);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "DarkCryptorAES"))
        self.lineEdit.setPlaceholderText(_translate("Dialog", "Имя файла"))
        self.pushButton.setText(_translate("Dialog", "Выбрать"))
        self.pushButton_2.setText(_translate("Dialog", "Шифровать"))
        self.pushButton_3.setText(_translate("Dialog", "Сгенерировать"))
        self.lineEdit_2.setPlaceholderText(_translate("Dialog", "Пароль"))
        self.lineEdit_3.setPlaceholderText(_translate("Dialog", "Кол-во битов"))
        self.pushButton_4.setText(_translate("Dialog", "Настройки"))
        self.pushButton_5.setText(_translate("Dialog", "Имя"))

def getpassword(): # генератор паролей
    try:
        kolvo = int(ui.lineEdit_3.text()) # взять количество символов
        oneBytes= ["q","w","e","r","t","y","u","i","o","p","Z","X","C","V","B","a","s","d","f","g","h","j","k","l","N","M","z","x","c","v","b","n","m","1",
           "2","3","Q","W","E","R","T","Y","U","I","O","P","4","5","A","S","D","F","G","H","J","K","L","6",'7',"8","9","0","(",")",'"',"'","-","_","=","+",
           "!","@","#","$","%","^","&","*","№",";",":","?",".",",","`","~",] # все символы
        o = 0
        bytesText = ""

        while o != kolvo: # цикл для создание пароля
            shuffle(oneBytes)
            bytesText += oneBytes[0]
            o += 1
        ui.lineEdit_2.setText(bytesText) # Показываем пароль
    except:
        ms_info("CyberCryptor", "Введите число байтов в пароле\nбайт = 1 символ")

def takefileUi():  # Получение файла
    global file, fileDir
    try:
        file = qtOpenFile()
        fileDir = os.path.dirname(file)
        ui.lineEdit.setText(file)
    except:
        pass

def takedirUi():  # получение директории
    global dir
    try:
        dir = qtOpenDir()
        ui.lineEdit.setText(dir)
    except:
        pass

def settings_saveUi(): # сохранить настройки
    if st.checkBox.isChecked():
        ui.lineEdit.setPlaceholderText("Директория")
    else:
       ui.lineEdit.setPlaceholderText("Имя файла")
    if st.radioButton.isChecked():
        ui.pushButton_2.setText("Шифровать")
    elif st.radioButton_2.isChecked():
        ui.pushButton_2.setText("Расшифровать")
    if st.checkBox_3.isChecked():
        ui.pushButton_5.setToolTip("")
    else:
       ui.pushButton_5.setToolTip("Чтобы изменить имя включите в настройках")
    SettingsDialog.close()

def encryptUi():
    global name
    try:
        password = ui.lineEdit_2.text()
        bufferSize = 512 * 1024
        if name != '' and name != None:
            fullPath = os.path.join(fileDir, name)
            Cry.encryptFile(str(file), fullPath, password, bufferSize)
        else:
            fullPath = os.path.join(fileDir, str(file) + ".DC")
            Cry.encryptFile(str(file), fullPath, password, bufferSize)
        if st.checkBox_2.isChecked():
            savepass = open("CCSavePass.txt", "w")
            if name != "" and name != None:
                savepass.write(f"\n {name} ::: {password}")
            else:
                savepass.write(f"\n {file}.DC ::: {password}")
            savepass.close()
        if st.checkBox_4.isChecked():
            pass
        else:
            os.remove(str(file))
        ui.lineEdit.clear()
        ui.lineEdit_2.clear()
        ms_info("CyberCryptor", "Выполнено!")
        nm.lineEdit.clear()
        name = ""
    except:
        ms_error("CyberCryptor", "Ошибка!")

def decryptUi():
    global name
    try:
        passworded = ui.lineEdit_2.text()
        bufferSize = 512 * 1024
        if name != '' and name != None:
            fullPath = os.path.join(fileDir, str(name))
            Cry.decryptFile(str(file), fullPath, passworded, bufferSize)
        else:
            fullPath = os.path.join(fileDir, str(os.path.splitext(str(file))[0]))
            Cry.decryptFile(str(file), fullPath, passworded, bufferSize)
        if st.checkBox_4.isChecked():
            pass
        else:
            os.remove(str(file))
        ui.lineEdit.clear()
        ui.lineEdit_2.clear()
        ms_info("CyberCryptor", "Выполнено!")
        nm.lineEdit.clear()
        name = ""
    except:
        ms_error("CyberCryptor", "Ошибка!")

def decrypt_dirUi():
    global file
    try:
        filesindir = os.listdir(dir)
        for filesindirs in filesindir:
            path = os.path.join(filesindirs)
            file = os.path.join(str(dir), path)
            decryptUi()
    except:
        ms_error("CyberCryptor", "Директория не выбрана!")

def encrypt_dirUi(): # Шифровка директорий
    global file
    try:
        filesindir = os.listdir(dir)
        for filesindirs in filesindir:
            path = os.path.join(filesindirs)
            file = os.path.join(str(dir), path)
            encryptUi()
    except:
        ms_error("CyberCryptor", "Директория не выбрана!")

def takebtnUi(): # Получение файла/директории
    if st.checkBox.isChecked():
        takedirUi()
    else:
        takefileUi()

def btn_cryptUi(): # проверка настроек для кнопки
    if st.checkBox.isChecked():
        if st.radioButton.isChecked():
            encrypt_dirUi()
        elif st.radioButton_2.isChecked():
            decrypt_dirUi()
    else:
        if st.radioButton.isChecked():
            encryptUi()
        elif st.radioButton_2.isChecked():
            decryptUi()
"""_________________________"""

def ms_info(title, text): # Информация в виде уведомления
    ms = QtWidgets.QMessageBox()
    ms.setIcon(QtWidgets.QMessageBox.Information)
    ms.setText(text)
    ms.setWindowTitle(title)
    ms.exec_()

def ms_error(title, text): # Информация в виде ошибки
    ms = QtWidgets.QMessageBox()
    ms.setIcon(QtWidgets.QMessageBox.Critical)
    ms.setText(text)
    ms.setWindowTitle(title)
    ms.exec_()

def qtOpenFile(): # Диалоговое окно для открытия файла
    a, b = QtWidgets.QFileDialog.getOpenFileName()
    return a

def qtOpenDir(): # Диалоговое окно для открытия директории
    from PyQt5.QtWidgets import QFileDialog
    a = QFileDialog.getExistingDirectory()
    return a

def takefile():  # Получение файла
    global file, fileDir
    try:
        file = qtOpenFile()
        fileDir = os.path.dirname(file)
        mn.lineEdit.setText(file)
    except:
        pass

def takedir():  # получение директории
    global dir
    try:
        dir = qtOpenDir()
        mn.lineEdit.setText(dir)
    except:
        pass

def takeName():
    if st.checkBox_3.isChecked():
        NameDialog.show()
    else:
        ms_info("DarkCryptor", "Надо включить \"Пользовательское имя\" в настройках")

def saveName():
    global name
    name = nm.lineEdit.text()
    NameDialog.close()

def encrypt():
    global name
    try:
        file = mn.lineEdit.text()
        with open(file, "r") as fil:
            crypt = fil.read().encode()
            rsa_public_key = RSA.importKey(publicKey)
            rsa_public_key = PKCS1_OAEP.new(rsa_public_key)
            encrypted_file = rsa_public_key.encrypt(crypt)
            if name != '' and name != None:
                encrypted_file_name = os.path.join(fileDir, str(name))
            else:
                encrypted_file_name = os.path.join(fileDir, f"{file}.DC")
            with open(encrypted_file_name, "wb") as encryFile:
                encryFile.write(encrypted_file)
            if st.checkBox_2.isChecked():
                savepass = open("CCSavePass.txt", "w")  # созранение файла
                if name != "" and name != None:
                    savepass.write(f"\n {name} ::: политика не одобраяет")
                else:
                    savepass.write(f"\n {file}.CC ::: политика не одобраяет")
                savepass.close()
            if st.checkBox_4.isChecked():
                pass
            else:
                os.remove(str(file))  # удаление исходного файла
        ms_info("RSA", "Done!")
        mn.lineEdit.clear()
        nm.lineEdit.clear()
        name = ""
    except:
        ms_error("RSA", "Ошибка!")

def decrypt():
    global name
    try:
        file = mn.lineEdit.text()
        with open(file, "rb") as fil:
            crypted = fil.read()
            rsa_private_key = RSA.importKey(privateKey)
            rsa_private_key = PKCS1_OAEP.new(rsa_private_key)
            decrypted_text = rsa_private_key.decrypt(crypted)
            if name != '' and name != None:
                decrypted_file_name = os.path.join(fileDir, str(name))
            else:
                decrypted_file_name = os.path.join(fileDir, str(os.path.splitext(str(file))[0]))
            with open(decrypted_file_name, "w") as decrypted_file:
                decrypted_file.write(decrypted_text.decode("utf-8"))
            if st.checkBox_4.isChecked():
                pass
            else:
                os.remove(str(file))
        ms_info("RSA", "Done!")
        mn.lineEdit.clear()
        nm.lineEdit.clear()
        name = ""
    except:
        ms_error("RSA", "Ошибка!")

def RSA_open():
    global choiceSettings
    MainDialog.show()
    choiceSettings = 1
    Start.close()

def AES_open():
    global choiceSettings
    CCDialog.show()
    choiceSettings = 0
    Start.close()

def decrypt_dir(): # расшифровка директорий
    global file
    try:
        filesindir = os.listdir(dir) # получить список файлов в директории dir
        for filesindirs in filesindir: # перебор файлов
            path = os.path.join(filesindirs)
            file = os.path.join(str(dir), path)
            decrypt()
    except:
        ms_error("CyberCryptor", "Директория не выбрана!")

def encrypt_dir(): # Шифровка директорий
    global file
    try:
        filesindir = os.listdir(dir)
        for filesindirs in filesindir:
            path = os.path.join(filesindirs)
            file = os.path.join(str(dir), path)
            encrypt()
    except:
        ms_error("CyberCryptor", "Директория не выбрана!")

def take_public():
    global publicKey
    try:
        pub = qtOpenFile()
        with open(pub, "rb") as publ:
            publicKey = publ.read()
        if "PUBLIC" in publicKey.decode("utf-8"):
            pass
        else:
            ms_info("DarkCryptor", "Выбран не тот файл!")
    except:
        ms_error("DarkCryptor", "Ошибка!")

def take_private():
    global privateKey
    try:
        priv = qtOpenFile()
        with open(priv, "rb") as priva:
            privateKey = priva.read()
        if "PRIVATE" in privateKey.decode("utf-8"):
            pass
        else:
            ms_info("DarkCryptor", "Выбран не тот файл")
    except:
        ms_error("DarkCryptor", "Ошибка!")

def create_keys():
    try:
        bits = mn.lineEdit_3.text()
        keys = RSA.generate(int(bits))
        keys_dir = "rsa"
        if os.path.exists(keys_dir):
            with open(f"{keys_dir}/public.rsa", "wb") as pub, open(f"{keys_dir}/private.rsa", "wb") as priv:
                pub.write(keys.publickey().exportKey('PEM'))
                priv.write(keys.export_key('PEM'))
        else:
            os.mkdir(keys_dir)
            with open(f"{keys_dir}/public.rsa", "wb") as pub, open(f"{keys_dir}/private.rsa", "wb") as priv:
                pub.write(keys.publickey().exportKey('PEM'))
                priv.write(keys.export_key('PEM'))
        ms_info("DarkCryptor", "Создано!")
    except:
        ms_error("DarkCryptor", "Ошибка!")

def settings(): # открыть настройки
    SettingsDialog.show()

def settings_save(): # сохранить настройки
    if st.checkBox.isChecked():
        mn.lineEdit.setPlaceholderText("Директория")
    else:
       mn.lineEdit.setPlaceholderText("Имя файла")
    if st.radioButton.isChecked():
        mn.pushButton_2.setText("Шифровать")
    elif st.radioButton_2.isChecked():
        mn.pushButton_2.setText("Расшифровать")
    if st.checkBox_3.isChecked():
        mn.pushButton_5.setToolTip("")
    else:
       mn.pushButton_5.setToolTip("Чтобы изменить имя включите в настройках")
    SettingsDialog.close()

def takebtn(): # Получение файла/директории
    if st.checkBox.isChecked():
        takedir()
    else:
        takefile()

def rename(): # окрытия окна для переименовки файла
    if st.checkBox_3.isChecked():
        NameDialog.show()
    else:
        ms_info("CyberCryptor", "Чтобы работало изменения имени файла,\nвключите его в настройках")

def choice_settings_save():
    if choiceSettings == 1: # RSA
        settings_save()
    elif choiceSettings == 0: # AES
        settings_saveUi()

def btn_crypt(): # проверка настроек для кнопки
    if st.checkBox.isChecked():
        if st.radioButton.isChecked():
            encrypt_dir()
        elif st.radioButton_2.isChecked():
            decrypt_dir()
    else:
        if st.radioButton.isChecked():
            encrypt()
        elif st.radioButton_2.isChecked():
            decrypt()

app = QtWidgets.QApplication([])
CCDialog = QtWidgets.QDialog()
MainDialog = QtWidgets.QDialog()
NameDialog = QtWidgets.QDialog()
SettingsDialog = QtWidgets.QDialog()
Start = QtWidgets.QDialog()
ui = Ui_Dialog()
st = Ui_Settings()
mn = Ui_Main()
nm = Ui_Name()
start = Ui_StartMenu()
start.setupUi(Start)
st.setupUi(SettingsDialog)
nm.setupUi(NameDialog)
mn.setupUi(MainDialog)
ui.setupUi(CCDialog)
Start.show()

mn.pushButton_7.clicked.connect(take_private)
mn.pushButton_6.clicked.connect(take_public)
mn.pushButton.clicked.connect(takebtn)
mn.pushButton_3.clicked.connect(create_keys)
mn.pushButton_5.clicked.connect(takeName)
mn.pushButton_2.clicked.connect(btn_crypt)
mn.pushButton_4.clicked.connect(settings)
nm.pushButton.clicked.connect(saveName)
start.RSA.clicked.connect(RSA_open)
start.AES.clicked.connect(AES_open)
st.pushButton.clicked.connect(choice_settings_save)
ui.pushButton.clicked.connect(takebtnUi)
ui.pushButton_3.clicked.connect(getpassword)
ui.pushButton_5.clicked.connect(takeName)
ui.pushButton_2.clicked.connect(btn_cryptUi)
ui.pushButton_4.clicked.connect(settings)

app.exec_()
